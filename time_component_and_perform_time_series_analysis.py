# -*- coding: utf-8 -*-
"""Time component and perform time series analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LoiSZZLCvPy57ARgMkeNSo7q5DwN5ZlY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use("dark_background")
plt.rcParams.update({'figure.figsize': (40, 10), 'font.size': 24})

from google.colab import files
uploads1 = files.upload()

import io

# Load each file into a pandas DataFrame using the uploaded content
ds = pd.read_csv(io.BytesIO(uploads1['dataset_tk.csv']))

ds["date"], ds["tn"] = ds[ds.columns[0]], ds["Tamil Nadu"]

ds.drop(ds.columns[:-2], axis = 1, inplace = True)

ds.info()

ds

plt.plot(ds["date"], ds["tn"])

from statsmodels.tsa.seasonal import seasonal_decompose

seasonal_decompose(ds["tn"], model='additive', period = 30).plot().show()
m = seasonal_decompose(ds["tn"], model='multiplicative', period = 30)
m.plot().show()

from statsmodels.tsa.stattools import adfuller, kpss

def adf_test(result):
    print('ADF Statistic: %f' % result[0])
    print('p-value: %.18f' % result[1])
    print('Critical Values:')
    for key, value in result[4].items():
        print('\t%s: %.3f' % (key, value))

    print ("\n stationary \n" if result[1] < 0.05 else "\n Non stationary \n")

def kpss_test(result):
    print('kpss Statistic: %f' % result[0])
    print('p-value: %.18f' % result[1])
    print('Critical Values:')
#     for key, value in result[4].items():
#         print('\t%s: %.3f' % (key, value))

    print ("\n stationary \n" if result[1] < 0.05 else "\n Non stationary \n")
adf_test(adfuller(ds["tn"]))
kpss_test(kpss(ds["tn"]))

(ds["tn"] / m.trend).plot()

(ds["tn"] / m.seasonal).plot()

pd.plotting.autocorrelation_plot(ds["tn"])

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

print (plot_acf(ds["tn"], lags = 180))

print (plot_pacf(ds["tn"], lags = 90))

df = pd.read_csv(io.BytesIO(uploads1['dataset_tk.csv']))
df.head()

df = df.rename(columns={'Unnamed: 0': 'DateTime'})
df['DateTime'] = pd.to_datetime(df['DateTime'],format="%d/%m/%Y %H:%M:%S")
df['Date'] = pd.to_datetime(df['DateTime']).dt.date
df.tail()

df.columns

cols = ['Punjab', 'Haryana', 'Rajasthan', 'Delhi', 'UP',
       'Uttarakhand', 'HP', 'J&K', 'Chandigarh', 'Chhattisgarh', 'Gujarat',
       'MP', 'Maharashtra', 'Goa', 'DNH', 'Andhra Pradesh', 'Telangana',
       'Karnataka', 'Kerala', 'Tamil Nadu', 'Pondy', 'Bihar', 'Jharkhand',
       'Odisha', 'West Bengal', 'Sikkim', 'Arunachal Pradesh', 'Assam',
       'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Tripura', 'Date']

subsetdf = df[cols]

subsetdf.set_index('Date',inplace=True)

cumsum_df = subsetdf.cumsum(axis=0)

cumsum_df

count_date = cumsum_df.groupby(cumsum_df.index)[['Punjab', 'Haryana', 'Rajasthan', 'Delhi', 'UP',
       'Uttarakhand', 'HP', 'J&K', 'Chandigarh', 'Chhattisgarh', 'Gujarat',
       'MP', 'Maharashtra', 'Goa', 'DNH', 'Andhra Pradesh', 'Telangana',
       'Karnataka', 'Kerala', 'Tamil Nadu', 'Pondy', 'Bihar', 'Jharkhand',
       'Odisha', 'West Bengal', 'Sikkim', 'Arunachal Pradesh', 'Assam',
       'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Tripura']].sum()

pw_clean = pd.DataFrame(count_date)
pw_clean['Date'] = pd.to_datetime(pw_clean.index)
pw_clean = pw_clean.set_index('Date')

pw_clean.head(20)

count_date = cumsum_df.groupby(cumsum_df.index)[['Punjab', 'Haryana', 'Rajasthan', 'Delhi', 'UP',
       'Uttarakhand', 'HP', 'J&K', 'Chandigarh', 'Chhattisgarh', 'Gujarat',
       'MP', 'Maharashtra', 'Goa', 'DNH', 'Andhra Pradesh', 'Telangana',
       'Karnataka', 'Kerala', 'Tamil Nadu', 'Pondy', 'Bihar', 'Jharkhand',
       'Odisha', 'West Bengal', 'Sikkim', 'Arunachal Pradesh', 'Assam',
       'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Tripura']].sum()

pw_clean = pd.DataFrame(count_date)
pw_clean['Date'] = pd.to_datetime(pw_clean.index)
pw_clean = pw_clean.set_index('Date')

pw_clean.head(20)

pip install bar-chart-race

import bar_chart_race as bcr

bcr.bar_chart_race(df=pw_clean, filename =None, figsize= (6,4),title = "State Power Consumption in India")

import pandas as pd
pd.set_option("display.max_columns",None)

df1 = df.copy('Deep')
df1.head()

df1['year'] = df1['DateTime'].apply(lambda x : x.year)
df1['Quarter'] = df1['DateTime'].apply(lambda x : x.quarter)
df1['month'] = df1['DateTime'].apply(lambda x : x.month)
df1['day'] = df1['DateTime'].apply(lambda x : x.day)
df1['weekofyear'] = df1['DateTime'].apply(lambda x : x.weekofyear)
df1['hour'] = df1['DateTime'].apply(lambda x : x.hour)
df1['minute'] = df1['DateTime'].apply(lambda x : x.minute)
df1['weekday'] = df1['DateTime'].apply(lambda x : x.day_name())
df1['MonthName'] = df1['DateTime'].apply(lambda x : x.month_name())
df1.head()

def hours2timing(x):
    if x in [22,23,0,1,2,3]:
        timing = 'Night'
    elif x in range(4, 12):
        timing = 'Morning'
    elif x in range(12, 17):
        timing = 'Afternoon'
    elif x in range(17, 22):
        timing = 'Evening'
    else:
        timing = 'X'
    return timing

df1['timing'] = df1['hour'].apply(hours2timing)
df1.head(3)

Q1 = df1[df1["Quarter"]==1]
Q2 = df1[df1["Quarter"]==2]
Q3 = df1[df1["Quarter"]==3]
Q4 = df1[df1["Quarter"]==4]

#Plot
fig,axes = plt.subplots(2,2,figsize=(17,7),sharex=True,sharey=True)

sns.distplot(Q1["Delhi"],color="skyblue", ax=axes[0,0]).set_title("Q1 - Consumption")
sns.distplot(Q2["Delhi"],color="red", ax=axes[0,1]).set_title("Q2 - Consumption")
sns.distplot(Q3["Delhi"],color="green", ax=axes[1,0]).set_title("Q3 - Consumption")
sns.distplot(Q4["Delhi"],color="gray", ax=axes[1,1]).set_title("Q4 - Consumption")

del Q1, Q2, Q3, Q4

delhi = pd.DataFrame(data=df1,columns=['Delhi','DateTime'])
delhi.head()

delhi.plot(figsize=(14,5),color='Red')
plt.xlabel('Date')
plt.ylabel('Delhi Power Consumption')
plt.show()

df2 = pd.DataFrame(data=df1,columns=['Delhi','DateTime'])

df2.rename(columns={"DateTime" : "ds", "Delhi" : "y"},inplace=True)
df2.head()

from prophet import Prophet
model = Prophet(seasonality_mode='multiplicative',yearly_seasonality=4)
model.fit(df2)
future = model.make_future_dataframe(periods=12 * 1, freq='MS')  #
forecast = model.predict(future)
fig = model.plot(forecast)
plt.show()

fig_a2 = model.plot_components(forecast)
plt.show()

fig_m2 = model.plot_components(forecast)
plt.show()